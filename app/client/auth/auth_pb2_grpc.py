# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import app.client.auth.auth_pb2 as auth__pb2


class AuthStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.VerifyEmail = channel.unary_unary(
                '/auth.Auth/VerifyEmail',
                request_serializer=auth__pb2.VerifyEmailRequest.SerializeToString,
                response_deserializer=auth__pb2.VerifyEmailResponse.FromString,
                )
        self.VerifyEmailNew = channel.unary_unary(
                '/auth.Auth/VerifyEmailNew',
                request_serializer=auth__pb2.VerifyEmailNewRequest.SerializeToString,
                response_deserializer=auth__pb2.VerifyEmailNewResponse.FromString,
                )
        self.Refresh = channel.unary_unary(
                '/auth.Auth/Refresh',
                request_serializer=auth__pb2.RefreshRequest.SerializeToString,
                response_deserializer=auth__pb2.RefreshResponse.FromString,
                )
        self.Access = channel.unary_unary(
                '/auth.Auth/Access',
                request_serializer=auth__pb2.AccessRequest.SerializeToString,
                response_deserializer=auth__pb2.AccessResponse.FromString,
                )
        self.CreateTokens = channel.unary_unary(
                '/auth.Auth/CreateTokens',
                request_serializer=auth__pb2.CreateTokensRequest.SerializeToString,
                response_deserializer=auth__pb2.CreateTokensResponse.FromString,
                )


class AuthServicer(object):
    """Missing associated documentation comment in .proto file."""

    def VerifyEmail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyEmailNew(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Refresh(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Access(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTokens(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'VerifyEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyEmail,
                    request_deserializer=auth__pb2.VerifyEmailRequest.FromString,
                    response_serializer=auth__pb2.VerifyEmailResponse.SerializeToString,
            ),
            'VerifyEmailNew': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyEmailNew,
                    request_deserializer=auth__pb2.VerifyEmailNewRequest.FromString,
                    response_serializer=auth__pb2.VerifyEmailNewResponse.SerializeToString,
            ),
            'Refresh': grpc.unary_unary_rpc_method_handler(
                    servicer.Refresh,
                    request_deserializer=auth__pb2.RefreshRequest.FromString,
                    response_serializer=auth__pb2.RefreshResponse.SerializeToString,
            ),
            'Access': grpc.unary_unary_rpc_method_handler(
                    servicer.Access,
                    request_deserializer=auth__pb2.AccessRequest.FromString,
                    response_serializer=auth__pb2.AccessResponse.SerializeToString,
            ),
            'CreateTokens': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTokens,
                    request_deserializer=auth__pb2.CreateTokensRequest.FromString,
                    response_serializer=auth__pb2.CreateTokensResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'auth.Auth', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Auth(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def VerifyEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.Auth/VerifyEmail',
            auth__pb2.VerifyEmailRequest.SerializeToString,
            auth__pb2.VerifyEmailResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyEmailNew(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.Auth/VerifyEmailNew',
            auth__pb2.VerifyEmailNewRequest.SerializeToString,
            auth__pb2.VerifyEmailNewResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Refresh(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.Auth/Refresh',
            auth__pb2.RefreshRequest.SerializeToString,
            auth__pb2.RefreshResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Access(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.Auth/Access',
            auth__pb2.AccessRequest.SerializeToString,
            auth__pb2.AccessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateTokens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.Auth/CreateTokens',
            auth__pb2.CreateTokensRequest.SerializeToString,
            auth__pb2.CreateTokensResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
